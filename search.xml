<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈树状数组</title>
      <link href="/2022/06/10/%E6%B5%85%E8%B0%88%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
      <url>/2022/06/10/%E6%B5%85%E8%B0%88%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<script src=/js/crypto-js.js></script><script>function doDecrypt (pwd, onError) {console.log('in doDecrypt');const txt = document.getElementById('enc_content').innerHTML;let plantext;try {const bytes = CryptoJS.AES.decrypt(txt, pwd);var plaintext = bytes.toString(CryptoJS.enc.Utf8);} catch(err) {if(onError) {onError(err);}return;}document.getElementById('enc_content').innerHTML = plaintext;document.getElementById('enc_content').style.display = 'block';document.getElementById('enc_passwd').style.display = 'none';if(typeof MathJax !== 'undefined') {MathJax.Hub.Queue(['resetEquationNumbers', MathJax.InputJax.TeX],['PreProcess', MathJax.Hub],['Reprocess', MathJax.Hub]);}}</script><div id="enc_content" style="display:none"></div><div id="enc_passwd"> <input id="enc_pwd_input" type="password" style="border-radius: 5px;border-style: groove;height: 30px;width: 50%;cursor: auto;font-size: 102%;color: currentColor;outline: none;text-overflow: initial;padding-left: 5px;" onkeydown="if (event.keyCode == 13) { decrypt(); return false;}"> <input type="submit" value="解&nbsp;密" onclick="decrypt()" style="width: 58px;height: 34px;border-radius: 5px;background-color: white;border-style: solid;color: currentColor;"><div id="enc_error" style="display: inline-block;color: #d84527;margin-left: 10px"></div><script>var onError = function(error) {document.getElementById("enc_error").innerHTML = "password error!"};function decrypt() {var passwd = document.getElementById("enc_pwd_input").value;console.log(passwd);doDecrypt(passwd, onError);}</script></div>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈线段树</title>
      <link href="/2022/06/08/%E6%B5%85%E8%B0%88%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
      <url>/2022/06/08/%E6%B5%85%E8%B0%88%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><ol><li>了解位运算（为线段树优化做铺垫）。</li><li>了解堆。</li><li>了解树。</li></ol><p>如果您还没有学完，就可以不用看下面的内容了。</p><h2 id="线段树是什么？"><a href="#线段树是什么？" class="headerlink" title="线段树是什么？"></a>线段树是什么？</h2><ul><li><p>线段树是一种可以解决区间问题的利器。</p></li><li><p>线段树是一种高级数据结构。</p></li><li><p>线段树是一种<strong>二叉搜索树</strong>（来源于网上）。</p></li></ul><p>只不过以上这些都是介绍，其实真正的线段树并没有那么恐怖。</p><h2 id="线段树的思想"><a href="#线段树的思想" class="headerlink" title="线段树的思想"></a>线段树的思想</h2><p>线段树（segment tree），又名区间树。我们可以通过一个题目来直观的了解它：P3372。</p><p>我们按照常规思路想：</p><ol><li><p>暴力，时间复杂度 $O(N^2)$。</p></li><li><p>前缀和，由于有修改操作，所以时间复杂度为 $O(N^2)$。</p></li></ol><p>这个复杂度是我们不可接受的，所以我们用线段树来解决这个问题。</p><p>我们假设原来的序列为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">1 9 3 1 2 5 2 2</span><br></pre></td></tr></table></figure><p>线段树，顾名思义，首先要建一棵<strong>二叉</strong>树：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/8cut34o7.png"></p><p>一定要注意是二叉树。</p><p>这棵树按照堆式存储来编号，一共有 $15$ 个节点。</p><p>然后我们赋予它每个节点一点值，并且把值记录为 $tree$：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/9wqpjw8f.png"></p><p>每个节点旁边的一个区间代表这个节点的值是这个区间的和，例如 $tree_5 &#x3D; 4$。</p><p>那么区间又有什么特殊的性质呢？假设一个节点所代表的区间是 $[l, r]$，那么它的两个子节点的区间就分别是 $[l, (l + r &gt;&gt; 1)]$，$[(l + r &gt;&gt; 1), r]$。就是分治的思想。</p><p>线段树的意义就讲完了，接下来将如何实现。</p><h3 id="最初的最初（-text-pushup-）"><a href="#最初的最初（-text-pushup-）" class="headerlink" title="最初的最初（$\text{pushup}$）"></a>最初的最初（$\text{pushup}$）</h3><p>$\text{pushup}$ 是一个函数，表示向上更新的意思，每次可以更新节点 $cur$ 的值。</p><p>$\text{pushup}$ 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[cur] = tree[cur &lt;&lt; <span class="number">1</span>] + tree[(cur &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>];   <span class="comment">//更新</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是一个回溯操作。</p><h3 id="建树（-text-build-）"><a href="#建树（-text-build-）" class="headerlink" title="建树（$\text{build}$）"></a>建树（$\text{build}$）</h3><p>这里非常简单，就是不断的分治&#x2F;递归下去，最后再用 $\text{pushup}$ 更新就可以了。</p><p>注意，到了叶子节点可以直接返回值。</p><p>$\text{build}$ 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> lt, <span class="type">int</span> rt)</span> <span class="comment">//cur 为树上节点，管辖 [lt, rt] 的数列区间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lt == rt)   <span class="comment">//递归到叶子节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree[cur] = a[lt];</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(cur &lt;&lt; <span class="number">1</span>, lt, mid);   <span class="comment">//继续分治/递归</span></span><br><span class="line">    <span class="built_in">build</span>((cur &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, rt);</span><br><span class="line">    <span class="built_in">pushup</span>(cur);  <span class="comment">//向上传递结果</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里时间复杂度为 $O(4N)$。</p><h3 id="查询（-text-query-）"><a href="#查询（-text-query-）" class="headerlink" title="查询（$\text{query}$）"></a>查询（$\text{query}$）</h3><p>举个例子。</p><p>就比如说查询区间 $[3, 8]$，我们首先把问题看到节点 $1$。节点 $1$ 说我管得范围太大了，得让我的两个儿子来解决。然后节点 $2$ 说，我也解决不了，又得给我的两个儿子解决。节点 $4$ 说这事跟我没关系，但节点 $5$ 说我正好就是问题中的一部分，可以解决。再来看节点 $3$，它说我也可以正好解决。所以询问的结果就是 $tree_5 + tree_3$。</p><p>从上述讲话中来看，其实就是不断的传儿子，只要在区间内就返回。</p><p>画图表示一下：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/84vih07k.png"></p><p>所以查询操作到的每个区间就只有三种选择：</p><ol><li>询问的区间 $[x, y]$ 和这个节点所覆盖的区间 $[lt, rt]$ 根本没有关系。</li></ol><p>图示如下：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/8243u4xu.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qva96nkw.png"></p><ol start="2"><li>询问的区间 $[x, y]$ 和这个节点所覆盖的区间 $[lt, rt]$ 是完全包含的关系。</li></ol><p>图示如下：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/oy58z9in.png"></p><ol start="3"><li>问的区间 $[x, y]$ 和这个节点所覆盖的区间 $[lt, rt]$ 是部分包含的关系。</li></ol><p>图示如下：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/8exetcrs.png"></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/xqsftoji.png"></p><p>此时我们只有当区间是 $3$ 的情形时才下传。</p><p>所以我们的代码就可以这么写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="comment">//cur 代表当前的节点，lt, rt 表示这个节点所管辖的区间，x, y 表示我要询问的区间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; rt || y &lt; lt) <span class="comment">//都已经没有关系了，直接返回 0</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= lt &amp;&amp; rt &lt;= y) <span class="comment">//是 [x, y] 的一部分</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[cur];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;   <span class="comment">//向左右儿子请求答案</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(cur &lt;&lt; <span class="number">1</span>, lt, mid, x, y) + <span class="built_in">query</span>((cur &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里时间复杂度是 $O(\log_2N)$ 的。</p><h3 id="更新（-text-update-）"><a href="#更新（-text-update-）" class="headerlink" title="更新（$\text{update}$）"></a>更新（$\text{update}$）</h3><p>再来举个例子，更新 $[3, 8]$。</p><p>我们不断地下传给儿子，直到到了叶子节点之后，然后再向上更新。</p><p>这个思路应该很好理解，就是把所有点所在的叶子节点都改完后，再上传更新。</p><p>画图表示一下：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/j1ipwby8.png"></p><p>然后我们更新又分为三点：</p><ol><li>更新区间 $[x, y]$ 与这个节点管辖的区间 $[lt, rt]$ 没有关系。</li></ol><p>这里的图示与查询一样。</p><ol start="2"><li>更新区间 $[x, y]$ 与这个节点管辖的区间 $[lt, rt]$ 是完全包含且 $lt &#x3D; rt$。</li></ol><p><del>这里作者不画，请自行脑补（bushi）。</del></p><p>其实就是到达了叶子节点。</p><ol start="3"><li>更新区间 $[x, y]$ 与这个节点管辖的区间 $[lt, rt]$ 是部分包含关系。或者是完全包含但是 $lt ≠ rt$。</li></ol><p>这里的图示也与查询一样。</p><p>然后只有当情况 $3$ 发生才传递给左右孩子。</p><p>$\text{update}$ 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> val)</span> <span class="comment">//在 [x, y] 的区间元素均加 val</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; rt || y &lt; rt) <span class="comment">// 没有任何关系</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(lt == rt &amp;&amp; x &lt;= lt &amp;&amp; rt &lt;= y) <span class="comment">//是叶子节点，且落在 [x, y] 内</span></span><br><span class="line">    &#123;</span><br><span class="line">        tree[cur] += val;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">update</span>(cur &lt;&lt; <span class="number">1</span>, lt, mid, x, y, val);</span><br><span class="line">    <span class="built_in">update</span>((cur &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y, val);</span><br><span class="line">    <span class="built_in">pushup</span>(cur); <span class="comment">//cur 的左右孩子有可能修改了，那么 cur 管辖的区间和要更新</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的时间复杂度为 $O(4N)$。</p><h3 id="优化-1-（-text-lazy-tag-）"><a href="#优化-1-（-text-lazy-tag-）" class="headerlink" title="优化 $1$（$\text{lazy-tag}$）"></a>优化 $1$（$\text{lazy-tag}$）</h3><p>我们发现，虽然建树和查询的时间复杂度是<del>很低</del>的，但是更新的时间复杂度很高，连暴力都比不上。</p><p>我们思考更新的时间高的原因，是因为你把每个元素都给更新了，而如果后面又没有查询这段区间，那岂不是就亏了。</p><p>所以，总结一段话：<strong>修改是为询问而服务的。</strong></p><p>所以就诞生了 $\text{lazy-tag}$ 这个东西（没错，就是懒~标记）。</p><p>我们可以记录一个数组 $tag$，来记录每个节点的懒标记数值。所以，只要还没有查询到，这个懒标记就一直在睡觉~~（bushi）。</p><p>又来举上面那个例子，更新区间 $[3, 8]$，此时，我们发现节点 $5$ 和节点 $3$ 是被完全包含的，所以我们就把更新的值放在节点 $5$ 和节点 $3$ 上面，先把自己的值给加了（注意，一定要先把自己的值先加上），然后再把 $\text{lazy-tag}$ 加上要更新的值，等到以后有机会再还给儿子节点。</p><p>那么给出打懒标记的函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">addtag</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> val)</span> <span class="comment">//cur，[lt, rt] 元素加 val</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tag[cur] += val;  <span class="comment">//加上以后要还给儿子们每个多少值</span></span><br><span class="line">    tree[cur] += (rt - lt + <span class="number">1</span>) * val;   <span class="comment">//这里要给自己加上</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后有人就问了，你这个懒标记总不能放在这里不动呀！那查询或更新的时候怎么办？没错，懒标记在这个时候的勤快了，在查询或更新的途中就顺便还“债”，把差的值还给儿子节点，同时又在儿子节点上打上标记，然后循环往复。</p><p>所以懒标记核心就一句话：只要你不查询，我就在这里睡觉，只要你一查询，我就托你顺便带给儿子节点。</p><p>然后给出下放标记（俗称托人带物，有个专业名词叫 $\text{pushdown}$）函数代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> lt, <span class="type">int</span> rt)</span> <span class="comment">//lt, rt 表示 cur 节点所管辖的区间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tag[cur] == <span class="number">0</span>) <span class="comment">//这里很重要，当没有标记，也就是为 0 时，就不要向下传了（有的题目不加会错）</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">addtag</span>(cur &lt;&lt; <span class="number">1</span>, lt, mid, tag[cur]); <span class="comment">//给左右孩子打标记</span></span><br><span class="line">    <span class="built_in">addtag</span>((cur &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, rt, tag[cur]);</span><br><span class="line">    tag[cur] = <span class="number">0</span>;   <span class="comment">//最后还掉一身的债</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们的 $\text{query}$ 和 $\text{update}$ 都要改一下：</p><p>$\text{query}$：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y)</span> <span class="comment">//cur 代表当前的节点，lt, rt 表示这个节点所管辖的区间，x, y 表示我要询问的区间</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; rt || y &lt; lt) <span class="comment">//都已经没有关系了，直接返回 0</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= lt &amp;&amp; rt &lt;= y) <span class="comment">//是 [x, y] 的一部分</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> tree[cur];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(cur, lt, rt); <span class="comment">//在这里下放标记，位置一定不能错</span></span><br><span class="line">    <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;   <span class="comment">//向左右儿子请求答案</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(cur &lt;&lt; <span class="number">1</span>, lt, mid, x, y) + <span class="built_in">query</span>((cur &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$\text{update}$：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> cur, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> val)</span> <span class="comment">//在 [x, y] 的区间元素均加 val</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; rt || y &lt; rt) <span class="comment">// 没有任何关系</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= lt &amp;&amp; rt &lt;= y) <span class="comment">//是被完全包含，打懒标记</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">addtag</span>(cur, lt, rt, val);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushdown</span>(cur, lt, rt);   <span class="comment">//只要向下递归就要 pushdown</span></span><br><span class="line">    <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">update</span>(cur &lt;&lt; <span class="number">1</span>, lt, mid, x, y, val);</span><br><span class="line">    <span class="built_in">update</span>((cur &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y, val);</span><br><span class="line">    <span class="built_in">pushup</span>(cur); <span class="comment">//cur 的左右孩子有可能修改了，那么 cur 管辖的区间和要更新</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先为什么 $\text{query}$ 和 $\text{update}$ 的 $\text{pushdown}$ 要放在那个位置，因为无论你时询问还是更新，只要向下递归就会下传。</p><p>至于 $\text{update}$ 的，当然是要在完全包含时才能 $\text{addtag}$ 的啦！</p><p>使用 $\text{lazy-tag}$ 之后时间复杂度会降到 $O(\log_2N)$（原理和查询一样）。</p><h3 id="优化-2-（标记永久化）"><a href="#优化-2-（标记永久化）" class="headerlink" title="优化 $2$（标记永久化）"></a>优化 $2$（标记永久化）</h3><p>线段树最出名的就是 $\text{lazy-tag}$ 了，它的优秀时间复杂度和实用性可以应对大多数情况。</p><p>而标记永久化呢？就是应对那些小部分情况。比如主席树区间修改，树套树（这里指线段树相套）矩阵修改。</p><p>标记永久化和 $\text{lazy-tag}$ 的区别：</p><ol><li><p>拒绝下传标记。</p></li><li><p>不一定每个区间的 $tree$ 加上 $tag$ 都是相对正确的。</p></li></ol><p>那么我们如何不用标记下传呢？</p><ol><li>我们的标记的值要加上 $tag \times (rt - lt + 1)$，并且要上传标记所带来的值。</li></ol><p>所以我们的 $\text{pushup}$ 就要改造一番：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">  tree[node] = tree[node &lt;&lt; <span class="number">1</span>] + tree[node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] + (rt - lt + <span class="number">1</span>) * tag[node];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就是在左右儿子的基础上加上这个节点的标记所给它带来的影响。</p><p>那么我们的 $\text{update}$ 也要改造一番：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(y &lt; lt || x &gt; rt)&#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= lt &amp;&amp; rt &lt;= y)&#123;</span><br><span class="line">    tag[node] += val;   <span class="comment">//标记 += val，并且拒绝下传，直接 return ;</span></span><br><span class="line">    tree[node] += (rt - lt + <span class="number">1</span>) * val;   <span class="comment">//这个节点要加上值</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, lt, mid, x, y, val);</span><br><span class="line">  <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y, val);</span><br><span class="line">  <span class="built_in">pushup</span>(node, lt, rt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>对于查询，我们只需要在一路时来加上相应的区间长度乘上<strong>这个区间的</strong> $tag$ 就可以了，利用一顿数学乱搞，就可以证明这样是对的（建议自己手推）。最后就是注意由于完全包含的已经加了，所以就不用再加一遍了。</li></ol><p>这里可以自己动手画画图，就可以明白了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(y &lt; lt || x &gt; rt)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= lt &amp;&amp; rt &lt;= y)&#123;</span><br><span class="line">    <span class="keyword">return</span> tree[node];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">min</span>(rt, y) - <span class="built_in">max</span>(lt, x) + <span class="number">1</span>) * tag[node] + <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>, lt, mid, x, y) + <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标记永久化其实在现实中用得不多，出题人也不会去出这些稀奇古怪得题目（<del>除非是出题人脑袋有病，诚心卡你</del>），所以这一章节也没有什么用啦！</p><h3 id="最后的最后（空间提醒-amp-时间复杂度说明）"><a href="#最后的最后（空间提醒-amp-时间复杂度说明）" class="headerlink" title="最后的最后（空间提醒 &amp; 时间复杂度说明）"></a>最后的最后（空间提醒 &amp; 时间复杂度说明）</h3><p>这里先说一下，$tree$ 和 $tag$ 都要开 $4N$ 这么大。</p><p>证明：</p><p>一棵完全二叉树的节点数量为 $2N - 1$（这个可以自己 baidu），又因为线段树可能不是完全二叉树，可能多出 $2N - 1$ 个叶子节点，所以一共就是 $4N - 2$，差不多就是 $4N$。</p><p>所以最初的建树与更新都是 $O(4N)$ 的复杂度。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>这里给出 线段树 $1$ 的所有代码（<del>相信没有人会看吧</del>）。</p><p>代码 $1$（$\text{lazy-tag}$）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long    <span class="comment">//只提醒这里，要开 long long</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tree[N * <span class="number">4</span>], tag[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">  tree[node] = tree[node &lt;&lt; <span class="number">1</span>] + tree[node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addtag</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">  tag[node] += val;</span><br><span class="line">  tree[node] += (rt - lt + <span class="number">1</span>) * val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!tag[node])&#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">addtag</span>(node &lt;&lt; <span class="number">1</span>, lt, mid, tag[node]);</span><br><span class="line">  <span class="built_in">addtag</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt, tag[node]);</span><br><span class="line">  tag[node] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(lt == rt)&#123;</span><br><span class="line">    tree[node] = a[lt];</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, lt, mid);</span><br><span class="line">  <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt);</span><br><span class="line">  <span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x &gt; rt || y &lt; lt)&#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= lt &amp;&amp; rt &lt;= y)&#123;</span><br><span class="line">    <span class="built_in">addtag</span>(node, lt, rt, val);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">pushdown</span>(node, lt, rt);</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, lt, mid, x, y, val);</span><br><span class="line">  <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y, val);</span><br><span class="line">  <span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(x &gt; rt || y &lt; lt)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= lt &amp;&amp; rt &lt;= y)&#123;</span><br><span class="line">    <span class="keyword">return</span> tree[node];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">pushdown</span>(node, lt, rt);</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>, lt, mid, x, y) + <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    <span class="type">int</span> op;</span><br><span class="line">    cin &gt;&gt; op;</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="type">int</span> x, y, k;</span><br><span class="line">      cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class="line">      <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="type">int</span> x, y;</span><br><span class="line">      cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">      cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">Solve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码 $2$（标记永久化）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tree[N * <span class="number">4</span>], tag[N * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">  tree[node] = tree[node &lt;&lt; <span class="number">1</span>] + tree[node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] + (rt - lt + <span class="number">1</span>) * tag[node];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(lt == rt)&#123;</span><br><span class="line">    tree[node] = a[lt];</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, lt, mid);</span><br><span class="line">  <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt);</span><br><span class="line">  <span class="built_in">pushup</span>(node, lt, rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(y &lt; lt || x &gt; rt)&#123;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= lt &amp;&amp; rt &lt;= y)&#123;</span><br><span class="line">    tag[node] += val;</span><br><span class="line">    tree[node] += (rt - lt + <span class="number">1</span>) * val;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span>, lt, mid, x, y, val);</span><br><span class="line">  <span class="built_in">update</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y, val);</span><br><span class="line">  <span class="built_in">pushup</span>(node, lt, rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(y &lt; lt || x &gt; rt)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= lt &amp;&amp; rt &lt;= y)&#123;</span><br><span class="line">    <span class="keyword">return</span> tree[node];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">min</span>(rt, y) - <span class="built_in">max</span>(lt, x) + <span class="number">1</span>) * tag[node] + <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span>, lt, mid, x, y) + <span class="built_in">query</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt, x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    cin &gt;&gt; a[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    <span class="type">int</span> op;</span><br><span class="line">    cin &gt;&gt; op;</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="type">int</span> x, y, k;</span><br><span class="line">      cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;</span><br><span class="line">      <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="type">int</span> x, y;</span><br><span class="line">      cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">      cout &lt;&lt; <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, x, y) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">Solve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><del>应该讲得很清楚（过于自信）。</del></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>使用线段树还可以解决区间最大值，最小值，最大公约数等问题。使用线段树解决的问题必须满足<strong>区间加法</strong>（这是重点）。</p><p>所谓区间加法。设 $[l, r]$，并且 $mid$ 是中点（$l + r &gt;&gt; 1$），打个比方：</p><p>$[l, mid]$ 的和 $+$ $[mid + 1, r]$ 的和等于 $[l, r]$ 的和。</p><p>区间加法就是这个意思。</p><h2 id="可持久化线段树-x2F-主席树"><a href="#可持久化线段树-x2F-主席树" class="headerlink" title="可持久化线段树&#x2F;主席树"></a>可持久化线段树&#x2F;主席树</h2><p><del>听说主席树这个名字是 OIer 们在谈论政治的时候发明了这个玩意。</del></p><h2 id="可持久化线段树有什么用"><a href="#可持久化线段树有什么用" class="headerlink" title="可持久化线段树有什么用"></a>可持久化线段树有什么用</h2><p>可持久化线段树可以保存每一个历史版本的线段树，使得可以在每一个历史版本上做查询和修改。</p><p>简单来说，就是可以后悔。</p><h2 id="可持久化线段树的思想"><a href="#可持久化线段树的思想" class="headerlink" title="可持久化线段树的思想"></a>可持久化线段树的思想</h2><p>我们还是通过一个例题来了解它：P3919。</p><p>我们可以发现什么？</p><p>我们可以发现这些东西：</p><ol><li><p>每次只有<strong>单点赋值</strong>。</p></li><li><p>每次只有单点查询。</p></li><li><p>涉及到每个历史版本的保存。</p></li></ol><p>那么，如何保存每个历史版本呢？</p><p>如果针对每一次操作开一棵线段树的话，空间会炸！</p><p>那么我们想，由于整棵树是一棵二叉树，所以高度为 $\log_2N$ 左右，所以我们每次单点赋值只会更改最多 $\log_2N$ 左右的线段树节点！这句话就是主席树的关键。</p><p>所以针对每一次操作，我们只需保存新的被修改过的线段树节点就行了。</p><p>那么我们如何建这棵线段树呢？请看以下这个图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/o6mkrwr3.png"></p><p>我们可以看出，更新操作在原始版本上是不做任何修改的。我们只需要新建要修改的节点的副本，并且把副本的值一一改变，再与原始版本连边就可以了。</p><p>新建副本的意思就是，新建修改过后的节点，然后连边到要修改的历史版本的线段树里的没有修改过的节点（自己看图就清晰了）。</p><p>那么我们需要注意什么：</p><ol><li><p>主席树里有很多个版本，因此就会有很多的根节点，我们可以用数组 $root$ 来保存每个版本的根节点。</p></li><li><p>每个节点有很多个父亲，但是永远只有<strong>两个儿子</strong>。</p></li><li><p>由于编号的问题，所以我们必须要记录节点个数以此来进行编号。</p></li><li><p>注意主席树里新建的点的左右儿子。</p></li><li><p>由于是单点修改，所以不需要懒标记。</p></li><li><p>在新建节点时，我们只需要把左右儿子分辨清楚就行了。</p></li></ol><p>现在我们发现从任何一个根节点向下递归都是一棵线段树。</p><p>所以按照这个思路就可以开始打代码了。</p><p>这里我是把初始看成版本 $1$。</p><p>这里因为 $\text{pushup}$ 还是一样的操作，所以我就没有放上来了。</p><h3 id="建树（-text-build-）-1"><a href="#建树（-text-build-）-1" class="headerlink" title="建树（$\text{build}$）"></a>建树（$\text{build}$）</h3><p>我们建树的时候可以先定义结构体 $segment_tree$：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">segment_tree</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;     <span class="comment">//代表左右孩子</span></span><br><span class="line">    <span class="type">int</span> lt, rt;    <span class="comment">//代表所表示的区间</span></span><br><span class="line">    <span class="type">int</span> val;      <span class="comment">//代表节点的值</span></span><br><span class="line">&#125;tree[N * <span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>然后跟普通线段树一样的操作，只不过把 $root_1 &#x3D; 1$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(lt == rt)&#123;</span><br><span class="line">      tree[node].lt = lt, tree[node].rt = rt;</span><br><span class="line">      tree[node].v = a[lt];   <span class="comment">//这里由于是叶子节点所以左右儿子不用记</span></span><br><span class="line">      <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    tot = <span class="built_in">max</span>(tot, node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);   <span class="comment">//这里的 tot 表示的是节点总个数</span></span><br><span class="line">    tree[node].lt = lt, tree[node].rt = rt;</span><br><span class="line">    tree[node].l = node &lt;&lt; <span class="number">1</span>, tree[node].r = node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;    <span class="comment">//记录一下信息</span></span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, lt, mid);</span><br><span class="line">    <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt);</span><br><span class="line">    <span class="built_in">pushup</span>(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>是不是很简单。</p><h3 id="更新（-text-update-）-1"><a href="#更新（-text-update-）-1" class="headerlink" title="更新（$\text{update}$）"></a>更新（$\text{update}$）</h3><p>这里的更新先把代码放上来：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> x, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree[node].l &amp;&amp; !tree[node].r)&#123;</span><br><span class="line">        tot++;</span><br><span class="line">        tree[tot].lt = tree[node].lt, tree[tot].rt = tree[node].rt;</span><br><span class="line">        tree[tot].v = k;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    tot++;</span><br><span class="line">    tree[tot].lt = tree[node].lt, tree[tot].rt = tree[node].rt;</span><br><span class="line">    <span class="type">int</span> tmp = tot;</span><br><span class="line">    <span class="type">int</span> mid = tree[node].lt + tree[node].rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x &lt;= mid)&#123;</span><br><span class="line">        tree[tot].l = tot + <span class="number">1</span>, tree[tot].r = tree[node].r;</span><br><span class="line">        <span class="built_in">update</span>(tree[node].l, x, k);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        tree[tot].l = tree[node].l, tree[tot].r = tot + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">update</span>(tree[node].r, x, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后解释是什么意思。</p><p>首先我们看 $8$ ~ $10$ 行，这里是新建一个节点。注意第 $10$ 行，我们先记一下 $tot$，为准备 $\text{pushup}$。</p><p>我们再看 $12$ ~ $15$ 行，这里的意思是 $x$ 在左儿子的区间内，所以结合图例我们可以看出：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/z1qzcv8o.png"></p><p>我们发现，如果是这个节点的左节点要做修改，那么这个节点对应的新建的节点的左儿子就是接下来要新建的这个节点的左儿子节点的对应节点，我们可以算出编号为 $tot + 1$，然后新建节点的右孩子还是对应节点的右孩子。</p><p>然后如果是修改右孩子直接反过来即可。</p><p>再来看 $2$ ~ $7$ 行，这里是到了叶子节点，我们还是新建一个节点，然后将权值设为 $k$。记得要 <code>return ;</code></p><p><del>是不是很难？</del></p><h3 id="查询（-text-query-）-1"><a href="#查询（-text-query-）-1" class="headerlink" title="查询（$\text{query}$）"></a>查询（$\text{query}$）</h3><p>查询的话，直接向下搜，搜到叶子节点直接返回就行了：</p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!tree[node].l &amp;&amp; !tree[node].r)&#123;</span><br><span class="line">    <span class="keyword">return</span> tree[node].v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = tree[node].lt + tree[node].rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= mid)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(tree[node].l, x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(tree[node].r, x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个很简单吧！注意只要从要求搜的 $root$ 就行了。</p><h3 id="最后（空间复杂度分析）"><a href="#最后（空间复杂度分析）" class="headerlink" title="最后（空间复杂度分析）"></a>最后（空间复杂度分析）</h3><p>注意，这里由于每次操作只更改 $\log_2N$ 个节点，所以只需要 $O(M \log_2N)$ 的空间就可以把所有历史版本的线段树全部记下来。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><p>代码就放上来吧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span> </span>&#123;    <span class="comment">//注意这里时间会超，要开快读</span></span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, f = <span class="number">1</span>;</span><br><span class="line">  <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">      f = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ch = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">    x = x * <span class="number">10</span> + ch - <span class="number">48</span>;</span><br><span class="line">    ch = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = N * <span class="number">26</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> tot;     <span class="comment">//节点个数</span></span><br><span class="line"><span class="type">int</span> len, root[M];  <span class="comment">//所有版本的根节点</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment_tree</span>&#123;</span><br><span class="line">  <span class="type">int</span> lt, rt;    <span class="comment">//代表区间</span></span><br><span class="line">  <span class="type">int</span> l, r;   <span class="comment">//左右孩子</span></span><br><span class="line">  <span class="type">int</span> v;    <span class="comment">//代表值</span></span><br><span class="line">&#125;tree[M];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> node)</span></span>&#123;</span><br><span class="line">  tree[node].v = tree[tree[node].l].v + tree[tree[node].r].v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> lt, <span class="type">int</span> rt)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(lt == rt)&#123;</span><br><span class="line">    tree[node].lt = lt, tree[node].rt = rt;</span><br><span class="line">    tree[node].v = a[lt];</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = lt + rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  tot = <span class="built_in">max</span>(tot, node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">  tree[node].lt = lt, tree[node].rt = rt;</span><br><span class="line">  tree[node].l = node &lt;&lt; <span class="number">1</span>, tree[node].r = node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span>, lt, mid);</span><br><span class="line">  <span class="built_in">build</span>(node &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> x, <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!tree[node].l &amp;&amp; !tree[node].r)&#123;</span><br><span class="line">    tot++;</span><br><span class="line">    tree[tot].lt = tree[node].lt, tree[tot].rt = tree[node].rt;</span><br><span class="line">    tree[tot].v = k;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">  &#125;</span><br><span class="line">  tot++;</span><br><span class="line">  tree[tot].lt = tree[node].lt, tree[tot].rt = tree[node].rt;</span><br><span class="line">  <span class="type">int</span> tmp = tot;</span><br><span class="line">  <span class="type">int</span> mid = tree[node].lt + tree[node].rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= mid)&#123;</span><br><span class="line">    tree[tot].l = tot + <span class="number">1</span>, tree[tot].r = tree[node].r;</span><br><span class="line">    <span class="built_in">update</span>(tree[node].l, x, k);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    tree[tot].l = tree[node].l, tree[tot].r = tot + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">update</span>(tree[node].r, x, k);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">pushup</span>(tmp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> node, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!tree[node].l &amp;&amp; !tree[node].r)&#123;</span><br><span class="line">    <span class="keyword">return</span> tree[node].v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> mid = tree[node].lt + tree[node].rt &gt;&gt; <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span>(x &lt;= mid)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(tree[node].l, x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(tree[node].r, x);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line">  n = <span class="built_in">read</span>(), m = <span class="built_in">read</span>();</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">    a[i] = <span class="built_in">read</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  root[++len] = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">  <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    <span class="type">int</span> v, op;</span><br><span class="line">    v = <span class="built_in">read</span>(), op = <span class="built_in">read</span>();</span><br><span class="line">    v++;</span><br><span class="line">    <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;</span><br><span class="line">      <span class="type">int</span> x, k;</span><br><span class="line">      x = <span class="built_in">read</span>(), k = <span class="built_in">read</span>();</span><br><span class="line">      root[++len] = tot + <span class="number">1</span>;</span><br><span class="line">      <span class="built_in">update</span>(root[v], x, k);    <span class="comment">//注意从哪个版本开始找</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="type">int</span> x;</span><br><span class="line">      x = <span class="built_in">read</span>();</span><br><span class="line">      len++;</span><br><span class="line">      root[len] = root[v];   <span class="comment">//这里记一下版本根节点</span></span><br><span class="line">      cout &lt;&lt; <span class="built_in">query</span>(root[v], x) &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;  <span class="comment">//这里也一样</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">Solve</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="疑问-amp-催更"><a href="#疑问-amp-催更" class="headerlink" title="疑问 &amp; 催更"></a>疑问 &amp; 催更</h2><p>请私信 $\color{red}\text{_Alexande_}$，这里有快速链接：<a href="https://www.luogu.com.cn/chat?uid=363006">$\text{Link}$</a>。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/05/hello-world/"/>
      <url>/2022/06/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
